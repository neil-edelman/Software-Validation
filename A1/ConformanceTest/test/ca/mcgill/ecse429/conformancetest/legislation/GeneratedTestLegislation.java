/** Auto-generated by Nplus. */

package ca.mcgill.ecse429.conformancetest.legislation;

import org.junit.Test;
import org.junit.Assert;

import java.util.function.Predicate;

public class GeneratedTestLegislation {

	static final Predicate<Legislation> isStateinPreparation = (m) -> m.getState() == Legislation.State.inPreparation;
	static final Predicate<Legislation> isStateinHouseOfCommons = (m) -> m.getState() == Legislation.State.inHouseOfCommons;
	static final Predicate<Legislation> isStateinSenate = (m) -> m.getState() == Legislation.State.inSenate;
	static final Predicate<Legislation> isStatefinalized = (m) -> m.getState() == Legislation.State.finalized;

	static Legislation test;

	@Test
	public void TestPath1() {
		/* make a new test class; assumes no-arg con'r is good */
		test = new Legislation();

		/* start ->@ctor-> inPreparation */
		//Assert.assertTrue(isStateinPreparation.test(test));
		/* inPreparation ->introduceInHouse-> inHouseOfCommons */
		//Assert.assertTrue(isStateinHouseOfCommons.test(test));
		/* inHouseOfCommons ->votePasses-> finalized */
		//Assert.assertTrue(isStatefinalized.test(test));
	}

	@Test
	public void TestPath2() {
		/* make a new test class; assumes no-arg con'r is good */
		test = new Legislation();

		/* start ->@ctor-> inPreparation */
		//Assert.assertTrue(isStateinPreparation.test(test));
		/* inPreparation ->introduceInHouse-> inHouseOfCommons */
		//Assert.assertTrue(isStateinHouseOfCommons.test(test));
		/* inHouseOfCommons ->votePasses-> inSenate */
		//Assert.assertTrue(isStateinSenate.test(test));
		/* inSenate ->votePasses-> finalized */
		//Assert.assertTrue(isStatefinalized.test(test));
	}

	@Test
	public void TestPath3() {
		/* make a new test class; assumes no-arg con'r is good */
		test = new Legislation();

		/* start ->@ctor-> inPreparation */
		//Assert.assertTrue(isStateinPreparation.test(test));
		/* inPreparation ->introduceInHouse-> inHouseOfCommons */
		//Assert.assertTrue(isStateinHouseOfCommons.test(test));
		/* inHouseOfCommons ->votePasses-> inSenate */
		//Assert.assertTrue(isStateinSenate.test(test));
		/* inSenate ->votePasses-> inHouseOfCommons */
		//Assert.assertTrue(isStateinHouseOfCommons.test(test));
	}

	@Test
	public void TestPath4() {
		/* make a new test class; assumes no-arg con'r is good */
		test = new Legislation();

		/* start ->@ctor-> inPreparation */
		//Assert.assertTrue(isStateinPreparation.test(test));
		/* inPreparation ->introduceInHouse-> inHouseOfCommons */
		//Assert.assertTrue(isStateinHouseOfCommons.test(test));
		/* inHouseOfCommons ->votePasses-> inSenate */
		//Assert.assertTrue(isStateinSenate.test(test));
		/* inSenate ->voteFails-> inPreparation */
		//Assert.assertTrue(isStateinPreparation.test(test));
	}

	@Test
	public void TestPath5() {
		/* make a new test class; assumes no-arg con'r is good */
		test = new Legislation();

		/* start ->@ctor-> inPreparation */
		//Assert.assertTrue(isStateinPreparation.test(test));
		/* inPreparation ->introduceInHouse-> inHouseOfCommons */
		//Assert.assertTrue(isStateinHouseOfCommons.test(test));
		/* inHouseOfCommons ->voteFails-> inPreparation */
		//Assert.assertTrue(isStateinPreparation.test(test));
	}

	@Test
	public void TestPath6() {
		/* make a new test class; assumes no-arg con'r is good */
		test = new Legislation();

		/* start ->@ctor-> inPreparation */
		//Assert.assertTrue(isStateinPreparation.test(test));
		/* inPreparation ->introduceInSenate-> inSenate */
		//Assert.assertTrue(isStateinSenate.test(test));
	}

}

/** Test case that completes the class auto-generated by Nplus. */

package ca.mcgill.ecse429.conformancetest.ccoinbox;

import org.junit.Test;
import org.junit.Assert;

import java.util.function.Predicate;

public class TestCCoinBox {

	static final Predicate<CCoinBox> isStateempty = (s) -> s.getState() == CCoinBox.State.empty;
	static final Predicate<CCoinBox> isStatenotAllowed = (s) -> s.getState() == CCoinBox.State.notAllowed;
	static final Predicate<CCoinBox> isStateallowed = (s) -> s.getState() == CCoinBox.State.allowed;

	static CCoinBox test;

	@Test
	public void TestPath1() {
		/* start ->@ctor-> empty */
		test = new CCoinBox();
		int currentQuarters = 0;
		int totalQuarters = 0;
		Assert.assertTrue(isStateempty.test(test));
		
		// ADDED MANUALLY: just testing the constructor
		Assert.assertEquals(currentQuarters, test.getTotalQtrs());
		Assert.assertEquals(totalQuarters, test.getCurQtrs());
		Assert.assertFalse(test.getAllowVend());

		/* empty ->addQtr-> notAllowed */
		test.addQtr();
		Assert.assertTrue(isStatenotAllowed.test(test));
		
		// ADDED MANUALLY: the current quarters should now be incremented
		currentQuarters +=1;
		Assert.assertEquals(currentQuarters, test.getCurQtrs());

		/* notAllowed ->addQtr-> allowed */
		test.addQtr();
		Assert.assertTrue(isStateallowed.test(test));
		
		// ADDED MANUALLY: the current quarters should now be incremented
		currentQuarters +=1;
		Assert.assertEquals(currentQuarters, test.getCurQtrs());
		
		// ADDED MANUALLY: add 2 to the current quarters so that the state remains allowed after calling vend(), and test the setter method
		currentQuarters +=2;
		test.setCurQtrs(currentQuarters);
		Assert.assertEquals(currentQuarters, test.getCurQtrs());

		/* allowed ->vend-> allowed */
		test.vend();
		Assert.assertTrue(isStateallowed.test(test));
		
		// ADDED MANUALLY: the current quarters should now be back to 2, and total quarters increased by 2
		currentQuarters -= 2;
		totalQuarters += 2;
		Assert.assertEquals(currentQuarters, test.getCurQtrs());
		Assert.assertEquals(totalQuarters, test.getTotalQtrs());

	}

	@Test
	public void TestPath2() {
		/* start ->@ctor-> empty */
		test = new CCoinBox();
		int currentQuarters = 0;
		int totalQuarters = 0;
		Assert.assertTrue(isStateempty.test(test));
		
		// ADDED MANUALLY: just testing the constructor
		Assert.assertEquals(currentQuarters, test.getTotalQtrs());
		Assert.assertEquals(totalQuarters, test.getCurQtrs());
		Assert.assertFalse(test.getAllowVend());

		/* empty ->addQtr-> notAllowed */
		test.addQtr();
		Assert.assertTrue(isStatenotAllowed.test(test));
		
		// ADDED MANUALLY: the current quarters should now be incremented
		currentQuarters +=1;
		Assert.assertEquals(currentQuarters, test.getCurQtrs());

		/* notAllowed ->addQtr-> allowed */
		test.addQtr();
		Assert.assertTrue(isStateallowed.test(test));
		
		// ADDED MANUALLY: the current quarters should now be incremented
		currentQuarters +=1;
		Assert.assertEquals(currentQuarters, test.getCurQtrs());
		
		// ADDED MANUALLY: add 1 to the current quarters so that the state becomes not allowed after calling vend(), and test the setter method
		currentQuarters +=1;
		test.setCurQtrs(currentQuarters);
		Assert.assertEquals(currentQuarters, test.getCurQtrs());

		/* allowed ->vend-> notAllowed */
		test.vend();
		Assert.assertTrue(isStatenotAllowed.test(test));
		
		// ADDED MANUALLY: the current quarters should now be 1, and total quarters increased by 2
		currentQuarters -= 2;
		totalQuarters += 2;
		Assert.assertEquals(currentQuarters, test.getCurQtrs());
		Assert.assertEquals(totalQuarters, test.getTotalQtrs());

	}

	@Test
	public void TestPath3() {
		/* start ->@ctor-> empty */
		test = new CCoinBox();
		int currentQuarters = 0;
		int totalQuarters = 0;
		Assert.assertTrue(isStateempty.test(test));
		
		// ADDED MANUALLY: just testing the constructor
		Assert.assertEquals(currentQuarters, test.getTotalQtrs());
		Assert.assertEquals(totalQuarters, test.getCurQtrs());
		Assert.assertFalse(test.getAllowVend());

		/* empty ->addQtr-> notAllowed */
		test.addQtr();
		Assert.assertTrue(isStatenotAllowed.test(test));
		
		// ADDED MANUALLY: the current quarters should now be incremented
		currentQuarters +=1;
		Assert.assertEquals(currentQuarters, test.getCurQtrs());

		/* notAllowed ->addQtr-> allowed */
		test.addQtr();
		Assert.assertTrue(isStateallowed.test(test));
		
		// ADDED MANUALLY: the current quarters should now be incremented
		currentQuarters +=1;
		Assert.assertEquals(currentQuarters, test.getCurQtrs());

		/* allowed ->vend-> empty */
		test.vend();
		Assert.assertTrue(isStateempty.test(test));
		
		// ADDED MANUALLY: the current quarters should now be back to 0, and total quarters increased by 2
		currentQuarters -= 2;
		totalQuarters += 2;
		Assert.assertEquals(currentQuarters, test.getCurQtrs());
		Assert.assertEquals(totalQuarters, test.getTotalQtrs());

	}

	@Test
	public void TestPath4() {
		/* start ->@ctor-> empty */
		test = new CCoinBox();
		int currentQuarters = 0;
		int totalQuarters = 0;
		Assert.assertTrue(isStateempty.test(test));
		
		// ADDED MANUALLY: just testing the constructor
		Assert.assertEquals(currentQuarters, test.getTotalQtrs());
		Assert.assertEquals(totalQuarters, test.getCurQtrs());
		Assert.assertFalse(test.getAllowVend());

		/* empty ->addQtr-> notAllowed */
		test.addQtr();
		Assert.assertTrue(isStatenotAllowed.test(test));
		
		// ADDED MANUALLY: the current quarters should now be incremented
		currentQuarters +=1;
		Assert.assertEquals(currentQuarters, test.getCurQtrs());

		/* notAllowed ->addQtr-> allowed */
		test.addQtr();
		Assert.assertTrue(isStateallowed.test(test));
		
		// ADDED MANUALLY: the current quarters should now be incremented
		currentQuarters +=1;
		Assert.assertEquals(currentQuarters, test.getCurQtrs());

		/* allowed ->addQtr-> allowed */
		test.addQtr();
		Assert.assertTrue(isStateallowed.test(test));
		
		// ADDED MANUALLY: the current quarters should now be incremented
		// there is a bug in the CCoinBox.java addQtr() method, it does not make sense to add a quarter and then change the state from allowed to not allowed
		// the bug has been changed
		currentQuarters +=1;
		Assert.assertEquals(currentQuarters, test.getCurQtrs());

	}

	@Test
	public void TestPath5() {
		/* start ->@ctor-> empty */
		test = new CCoinBox();
		int currentQuarters = 0;
		int totalQuarters = 0;
		Assert.assertTrue(isStateempty.test(test));
		
		// ADDED MANUALLY: just testing the constructor
		Assert.assertEquals(currentQuarters, test.getTotalQtrs());
		Assert.assertEquals(totalQuarters, test.getCurQtrs());
		Assert.assertFalse(test.getAllowVend());

		/* empty ->addQtr-> notAllowed */
		test.addQtr();
		Assert.assertTrue(isStatenotAllowed.test(test));
		
		// ADDED MANUALLY: the current quarters should now be incremented
		currentQuarters +=1;
		Assert.assertEquals(currentQuarters, test.getCurQtrs());

		/* notAllowed ->addQtr-> allowed */
		test.addQtr();
		Assert.assertTrue(isStateallowed.test(test));
		
		// ADDED MANUALLY: the current quarters should now be incremented
		currentQuarters +=1;
		Assert.assertEquals(currentQuarters, test.getCurQtrs());

		/* allowed ->reset-> empty */
		test.reset();
		Assert.assertTrue(isStateempty.test(test));
		
		// ADDED MANUALLY: the current quarters and total quarters should be set back to 0
		currentQuarters -=2;
		Assert.assertEquals(currentQuarters, test.getCurQtrs());
		Assert.assertEquals(totalQuarters, test.getTotalQtrs());

	}

	@Test
	public void TestPath6() {
		/* start ->@ctor-> empty */
		test = new CCoinBox();
		int currentQuarters = 0;
		int totalQuarters = 0;
		Assert.assertTrue(isStateempty.test(test));
		
		// ADDED MANUALLY: just testing the constructor
		Assert.assertEquals(currentQuarters, test.getTotalQtrs());
		Assert.assertEquals(totalQuarters, test.getCurQtrs());
		Assert.assertFalse(test.getAllowVend());

		/* empty ->addQtr-> notAllowed */
		test.addQtr();
		Assert.assertTrue(isStatenotAllowed.test(test));
		
		// ADDED MANUALLY: the current quarters should now be incremented
		currentQuarters +=1;
		Assert.assertEquals(currentQuarters, test.getCurQtrs());

		/* notAllowed ->addQtr-> allowed */
		test.addQtr();
		Assert.assertTrue(isStateallowed.test(test));
		
		// ADDED MANUALLY: the current quarters should now be incremented
		currentQuarters +=1;
		Assert.assertEquals(currentQuarters, test.getCurQtrs());

		/* allowed ->returnQtrs-> empty */
		test.returnQtrs();
		Assert.assertTrue(isStateempty.test(test));
		
		// ADDED MANUALLY: the current quarters should now be set back to 0
		currentQuarters -=2;
		Assert.assertEquals(currentQuarters, test.getCurQtrs());

	}

	@Test
	public void TestPath7() {
		/* start ->@ctor-> empty */
		test = new CCoinBox();
		int currentQuarters = 0;
		int totalQuarters = 0;
		Assert.assertTrue(isStateempty.test(test));
		
		// ADDED MANUALLY: just testing the constructor
		Assert.assertEquals(currentQuarters, test.getTotalQtrs());
		Assert.assertEquals(totalQuarters, test.getCurQtrs());
		Assert.assertFalse(test.getAllowVend());

		/* empty ->addQtr-> notAllowed */
		test.addQtr();
		Assert.assertTrue(isStatenotAllowed.test(test));
		
		// ADDED MANUALLY: the current quarters should now be incremented
		currentQuarters +=1;
		Assert.assertEquals(currentQuarters, test.getCurQtrs());

		/* notAllowed ->reset-> empty */
		test.reset();
		Assert.assertTrue(isStateempty.test(test));
		
		// ADDED MANUALLY: the current quarters and total quarters should be set back to 0
		currentQuarters -=1;
		Assert.assertEquals(currentQuarters, test.getCurQtrs());
		Assert.assertEquals(totalQuarters, test.getTotalQtrs());

	}

	@Test
	public void TestPath8() {
		/* start ->@ctor-> empty */
		test = new CCoinBox();
		int currentQuarters = 0;
		int totalQuarters = 0;
		Assert.assertTrue(isStateempty.test(test));
		
		// ADDED MANUALLY: just testing the constructor
		Assert.assertEquals(currentQuarters, test.getTotalQtrs());
		Assert.assertEquals(totalQuarters, test.getCurQtrs());
		Assert.assertFalse(test.getAllowVend());

		/* empty ->addQtr-> notAllowed */
		test.addQtr();
		Assert.assertTrue(isStatenotAllowed.test(test));
		
		// ADDED MANUALLY: the current quarters should now be incremented
		currentQuarters +=1;
		Assert.assertEquals(currentQuarters, test.getCurQtrs());

		/* notAllowed ->returnQtrs-> empty */
		test.returnQtrs();
		Assert.assertTrue(isStateempty.test(test));
		
		// ADDED MANUALLY: the current quarters should back to 0
		currentQuarters -=1;
		Assert.assertEquals(currentQuarters, test.getCurQtrs());

	}

	@Test
	public void TestPath9() {
		/* start ->@ctor-> empty */
		test = new CCoinBox();
		int currentQuarters = 0;
		int totalQuarters = 0;
		Assert.assertTrue(isStateempty.test(test));
		
		// ADDED MANUALLY: just testing the constructor
		Assert.assertEquals(currentQuarters, test.getTotalQtrs());
		Assert.assertEquals(totalQuarters, test.getCurQtrs());
		Assert.assertFalse(test.getAllowVend());

		/* empty ->reset-> empty */
		test.reset();
		Assert.assertTrue(isStateempty.test(test));
		
		// ADDED MANUALLY: the total quarters should be 0
		Assert.assertEquals(totalQuarters, test.getCurQtrs());

	}

	@Test
	public void TestPath10() {
		/* start ->@ctor-> empty */
		test = new CCoinBox();
		int currentQuarters = 0;
		int totalQuarters = 0;
		Assert.assertTrue(isStateempty.test(test));
		
		// ADDED MANUALLY: just testing the constructor
		Assert.assertEquals(currentQuarters, test.getTotalQtrs());
		Assert.assertEquals(totalQuarters, test.getCurQtrs());
		Assert.assertFalse(test.getAllowVend());

		/* empty ->returnQtrs-> empty */
		test.returnQtrs();
		Assert.assertTrue(isStateempty.test(test));

	}

}

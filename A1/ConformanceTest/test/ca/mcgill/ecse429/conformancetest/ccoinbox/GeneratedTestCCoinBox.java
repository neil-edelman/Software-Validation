/** Auto-generated by Nplus. */

package ca.mcgill.ecse429.conformancetest.ccoinbox;

import org.junit.Test;
import org.junit.Assert;

import java.util.function.Predicate;

public class GeneratedTestCCoinBox {

	static final Predicate<CCoinBox> isStateempty = (s) -> s.getState() == CCoinBox.State.empty;
	static final Predicate<CCoinBox> isStatenotAllowed = (s) -> s.getState() == CCoinBox.State.notAllowed;
	static final Predicate<CCoinBox> isStateallowed = (s) -> s.getState() == CCoinBox.State.allowed;

	static CCoinBox test;

	/* string = totalQtrs = 0; curQtrs = 0; allowVend = false;
	 3 <totalQtrs>
	<0>
	 3 <curQtrs>
	<0>
	 3 <allowVend>
	<false>
	*/

	@Test
	public void TestPath1() {
		/* start ->@ctor:"totalQtrs = 0; curQtrs = 0; allowVend = false;",""-> empty */
		test = new CCoinBox();
		Assert.assertTrue(isStateempty.test(test));

		/* empty ->addQtr:"curQtrs = curQtrs + 1;",""-> notAllowed */
		test.addQtr();
		Assert.assertTrue(isStatenotAllowed.test(test));

		/* notAllowed ->addQtr:"curQtrs = curQtrs + 1; allowVend = true;",""-> allowed */
		test.addQtr();
		Assert.assertTrue(isStateallowed.test(test));

		/* allowed ->vend:"totalQtrs = totalQtrs + 2; curQtrs = curQtrs - 2;","curQtrs > 3"-> allowed */
		test.vend();
		Assert.assertTrue(isStateallowed.test(test));

	}

	@Test
	public void TestPath2() {
		/* start ->@ctor:"totalQtrs = 0; curQtrs = 0; allowVend = false;",""-> empty */
		test = new CCoinBox();
		Assert.assertTrue(isStateempty.test(test));

		/* empty ->addQtr:"curQtrs = curQtrs + 1;",""-> notAllowed */
		test.addQtr();
		Assert.assertTrue(isStatenotAllowed.test(test));

		/* notAllowed ->addQtr:"curQtrs = curQtrs + 1; allowVend = true;",""-> allowed */
		test.addQtr();
		Assert.assertTrue(isStateallowed.test(test));

		/* allowed ->vend:"totalQtrs = totalQtrs + 2; curQtrs = 1; allowVend = false;","curQtrs == 3"-> notAllowed */
		test.vend();
		Assert.assertTrue(isStatenotAllowed.test(test));

	}

	@Test
	public void TestPath3() {
		/* start ->@ctor:"totalQtrs = 0; curQtrs = 0; allowVend = false;",""-> empty */
		test = new CCoinBox();
		Assert.assertTrue(isStateempty.test(test));

		/* empty ->addQtr:"curQtrs = curQtrs + 1;",""-> notAllowed */
		test.addQtr();
		Assert.assertTrue(isStatenotAllowed.test(test));

		/* notAllowed ->addQtr:"curQtrs = curQtrs + 1; allowVend = true;",""-> allowed */
		test.addQtr();
		Assert.assertTrue(isStateallowed.test(test));

		/* allowed ->vend:"totalQtrs = totalQtrs + 2; curQtrs = 0; allowVend = false;","curQtrs == 2"-> empty */
		test.vend();
		Assert.assertTrue(isStateempty.test(test));

	}

	@Test
	public void TestPath4() {
		/* start ->@ctor:"totalQtrs = 0; curQtrs = 0; allowVend = false;",""-> empty */
		test = new CCoinBox();
		Assert.assertTrue(isStateempty.test(test));

		/* empty ->addQtr:"curQtrs = curQtrs + 1;",""-> notAllowed */
		test.addQtr();
		Assert.assertTrue(isStatenotAllowed.test(test));

		/* notAllowed ->addQtr:"curQtrs = curQtrs + 1; allowVend = true;",""-> allowed */
		test.addQtr();
		Assert.assertTrue(isStateallowed.test(test));

		/* allowed ->addQtr:"curQtrs = curQtrs + 1;",""-> allowed */
		test.addQtr();
		Assert.assertTrue(isStateallowed.test(test));

	}

	@Test
	public void TestPath5() {
		/* start ->@ctor:"totalQtrs = 0; curQtrs = 0; allowVend = false;",""-> empty */
		test = new CCoinBox();
		Assert.assertTrue(isStateempty.test(test));

		/* empty ->addQtr:"curQtrs = curQtrs + 1;",""-> notAllowed */
		test.addQtr();
		Assert.assertTrue(isStatenotAllowed.test(test));

		/* notAllowed ->addQtr:"curQtrs = curQtrs + 1; allowVend = true;",""-> allowed */
		test.addQtr();
		Assert.assertTrue(isStateallowed.test(test));

		/* allowed ->reset:"totalQtrs = 0; curQtrs = 0; allowVend = false;",""-> empty */
		test.reset();
		Assert.assertTrue(isStateempty.test(test));

	}

	@Test
	public void TestPath6() {
		/* start ->@ctor:"totalQtrs = 0; curQtrs = 0; allowVend = false;",""-> empty */
		test = new CCoinBox();
		Assert.assertTrue(isStateempty.test(test));

		/* empty ->addQtr:"curQtrs = curQtrs + 1;",""-> notAllowed */
		test.addQtr();
		Assert.assertTrue(isStatenotAllowed.test(test));

		/* notAllowed ->addQtr:"curQtrs = curQtrs + 1; allowVend = true;",""-> allowed */
		test.addQtr();
		Assert.assertTrue(isStateallowed.test(test));

		/* allowed ->returnQtrs:"curQtrs = 0; allowVend = false;",""-> empty */
		test.returnQtrs();
		Assert.assertTrue(isStateempty.test(test));

	}

	@Test
	public void TestPath7() {
		/* start ->@ctor:"totalQtrs = 0; curQtrs = 0; allowVend = false;",""-> empty */
		test = new CCoinBox();
		Assert.assertTrue(isStateempty.test(test));

		/* empty ->addQtr:"curQtrs = curQtrs + 1;",""-> notAllowed */
		test.addQtr();
		Assert.assertTrue(isStatenotAllowed.test(test));

		/* notAllowed ->reset:"totalQtrs = 0; curQtrs = 0;",""-> empty */
		test.reset();
		Assert.assertTrue(isStateempty.test(test));

	}

	@Test
	public void TestPath8() {
		/* start ->@ctor:"totalQtrs = 0; curQtrs = 0; allowVend = false;",""-> empty */
		test = new CCoinBox();
		Assert.assertTrue(isStateempty.test(test));

		/* empty ->addQtr:"curQtrs = curQtrs + 1;",""-> notAllowed */
		test.addQtr();
		Assert.assertTrue(isStatenotAllowed.test(test));

		/* notAllowed ->returnQtrs:"curQtrs = 0;",""-> empty */
		test.returnQtrs();
		Assert.assertTrue(isStateempty.test(test));

	}

	@Test
	public void TestPath9() {
		/* start ->@ctor:"totalQtrs = 0; curQtrs = 0; allowVend = false;",""-> empty */
		test = new CCoinBox();
		Assert.assertTrue(isStateempty.test(test));

		/* empty ->reset:"totalQtrs = 0;",""-> empty */
		test.reset();
		Assert.assertTrue(isStateempty.test(test));

	}

	@Test
	public void TestPath10() {
		/* start ->@ctor:"totalQtrs = 0; curQtrs = 0; allowVend = false;",""-> empty */
		test = new CCoinBox();
		Assert.assertTrue(isStateempty.test(test));

		/* empty ->returnQtrs:"",""-> empty */
		test.returnQtrs();
		Assert.assertTrue(isStateempty.test(test));

	}

}
